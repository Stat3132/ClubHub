networks:
  kittycatsuperfun:
    external: false

services:
  # database for user/club data
  PRO290UserClubServiceDBSqlServer:
    container_name: PRO290UserClubServiceDBSqlServer
    image: mcr.microsoft.com/mssql/server:2019-latest    
    restart: always
    hostname: PRO290UserClubServiceDBSqlServer
    ports:
      - "1433:1433"
    volumes:
      - sqlservervolume:/var/opt/mssql
    networks:
      - kittycatsuperfun
    environment:
      SA_PASSWORD: "abc12345!"
      ACCEPT_EULA: "Y"
  PRO290UserServiceAPI:
    container_name: PRO290UserServiceAPI
    build:
      context: ./UserService
      dockerfile: Dockerfile
    image: pro290userserviceapi:1
    restart: always
    hostname: PRO290UserServiceAPI
    ports:
      - "8085:8080"
    networks:
      - kittycatsuperfun


  PRO290ClubServiceAPI:
    container_name: PRO290ClubServiceAPI
    build:
      context: ./ClubService
      dockerfile: Dockerfile
    image: pro290clubserviceapi:1
    restart: always
    hostname: PRO290ClubServiceAPI
    ports:
      - "8081:8080"
    networks:
      - kittycatsuperfun

  PRO290EurekaRegistry:
    container_name: PRO290EurekaRegistry
    image: steeltoeoss/eureka-server:latest
    restart: always
    hostname: PRO290EurekaRegistry
    ports:
      - 8761:8761
    networks:
      - kittycatsuperfun 

  PRO290OcelotAPIGateway:
    container_name: PRO290OcelotAPIGateway
    build:
      context: ./API_Gateway
      dockerfile: Dockerfile
    image: pro290ocelotapigateway:1
    restart: always
    hostname: PRO290OcelotAPIGateway
    ports:
      - 5041:8080
    networks:
      - kittycatsuperfun
  
  PRO290MessageServiceQueueRabbitMQ:
    container_name: PRO290MessageServiceQueueRabbitMQ
    image: rabbitmq:3-management
    restart: always
    hostname: PRO290MessageServiceQueueRabbitMQ
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - kittycatsuperfun

  PRO290MessageServiceAPI:
    container_name: PRO290MessageServiceAPI
    build:
      context: ./MessageService
      dockerfile: Dockerfile
    image: pro290messageserviceapi:1
    restart: always
    hostname: PRO290MessageServiceAPI
    ports:
      - "8086:8080"
    networks:
      - kittycatsuperfun
    depends_on:
      - PRO290MessageServiceQueueRabbitMQ
      - PRO290EurekaRegistry
      - PRO290OcelotAPIGateway

  
  # database for Food serice
  PRO290EventServiceDBMongo:
    container_name: PRO290EventServiceDBMongo
    image: mongo:latest
    restart: always
    hostname: PRO290EventServiceDBMongo
    ports:
      - "27017:27017"
    networks:
      - kittycatsuperfun

  PRO290EventServiceAPI:
    container_name: PRO290EventServiceAPI
    build:
      context: ./EventService
      dockerfile: Dockerfile
    image: pro290eventserviceapi:1
    restart: always
    hostname: PRO290EventServiceAPI
    ports:
      - "8087:8000"
    networks:
      - kittycatsuperfun
    environment:
      - MONGO_URL=mongodb://PRO290EventServiceDBMongo:27017

  PRO290CustomerUI:
    container_name: PRO290CustomerUI
    build:
      context: ./customerui
      dockerfile: Dockerfile
    image: pro290customerui:1
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./customerui:/app   # <--- mount host folder into container
    networks:
      - kittycatsuperfun


volumes:
  sqlservervolume: